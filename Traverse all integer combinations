def traverse_integer_combination(d, sum_value, grid_step):
#      Traverse all d-dimension combination of integers, sum of which is sum_value, with step size of grid_step.
#      Note:  I.  d <= sum_value
#             II. grid_step should be a divisor of sum_value
#      Example 1: traverse_integer_combination(2, 5, 1)
#      Output:        array([[0, 5],
#                             [1, 4],
#                             [2, 3],
#                             [3, 2],
#                             [4, 1],
#                             [5, 0]])
                    
#         Example 2: traverse_integer_combination(3, 10, 5)
#         output:    array([[ 0.,  0., 10.],
#                            [ 0.,  5.,  5.],
#                            [ 0., 10.,  0.],
#                            [ 5.,  0.,  5.],
#                            [ 5.,  5.,  0.],
#                            [10.,  0.,  0.]])
    if d == 2:
        for i in range(0, sum_value+1, grid_step):
            j = sum_value - i
            if i == 0:
                temp_list = np.array([[i, j]])
            else:
                temp_list = np.vstack((temp_list, np.array([i, j])))
        return temp_list
    else:
        for i in range(0, sum_value+1, grid_step):
            temp = traverse_integer_combination(d-1, sum_value-i, grid_step)
            num_row = temp.shape[0]
            temp_list = np.hstack((np.ones((num_row, 1)) * i, temp))
            if i == 0:
                comb_array = temp_list                
            else: 
                comb_array = np.vstack((comb_array, temp_list))                
        return comb_array
           
